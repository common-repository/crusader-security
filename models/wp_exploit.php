<?php

if (!defined('ABSPATH')) die('Access Denied.');

if ( ! class_exists( 'MWPC_Exploit' ) ) {

	class MWPC_Exploit {

		public static function initialize() {
			// Load the Protection Module
			add_action( 'init', array( __CLASS__, 'protect' ) );

			// Manual Exploit Scanner Request
			add_action('admin_post_wpc_exploit_scanner', array(__CLASS__, 'check'));

            add_action('admin_post_wpc_save_exploit_options', array(__CLASS__, 'saveOptions'));
            add_action('wpc_exploitScanner', array(__CLASS__, 'cron_check'));
		}

		// Global Protection Module
		public static function protect() {
			$wpc = get_option( 'wpc' );

			// MySQL Injection
			$mysqli_enabled = isset( $wpc['mysqli_enabled'] ) ? $wpc['mysqli_enabled'] : false;
			$mysqli_post    = isset( $wpc['mysqli_post'] ) ? $wpc['mysqli_post'] : false;
			$mysqli_get     = isset( $wpc['mysqli_get'] ) ? $wpc['mysqli_get'] : false;
			$mysqli_common  = isset( $wpc['mysqli_common'] ) ? $wpc['mysqli_common'] : false;
			$mysqli_escapes = isset( $wpc['mysqli_escapes'] ) ? $wpc['mysqli_escapes'] : false;
			$mysqli_abs     = isset( $wpc['mysqli_abs'] ) ? $wpc['mysqli_abs'] : false;

			// XSS Injection
			$xssi_enabled = isset( $wpc['xssi_enabled'] ) ? $wpc['xssi_enabled'] : false;
			$xssi_get     = isset( $wpc['xssi_get'] ) ? $wpc['xssi_get'] : false;
			$xssi_post    = isset( $wpc['xssi_post'] ) ? $wpc['xssi_post'] : false;

			// File Injection
			$filei_enabled = isset( $wpc['filei_enabled'] ) ? $wpc['filei_enabled'] : false;
			$filei_mimes   = isset( $wpc['filei_mimes'] ) ? $wpc['filei_mimes'] : false;
			$filei_scan    = isset( $wpc['filei_enabled'] ) ? $wpc['filei_scan'] : false;


			// Prevent XSS
			if ( $xssi_enabled ) {
				if ( $xssi_get ) {
					foreach ( $_GET as $name => $value ) {
						if (is_array($_GET[ $name ])) {
							array_walk_recursive($_GET[ $name ], function(&$value) {
								$value = self::xss_clean( $value );
							});
						} else {
							$_GET[ $name ] = self::xss_clean( $value );
						}
					}
				}
				if ( $xssi_post ) {
					foreach ( $_POST as $name => $value ) {
						if (is_array($_POST[ $name ])) {
							array_walk_recursive($_POST[ $name ], function(&$value) {
								$value = self::xss_clean( $value );
							});
						} else {
							$_POST[ $name ] = self::xss_clean( $value );
						}
					}
				}
			}

			// Prevent MySQLi
			if ( $mysqli_enabled ) {
				if ( $mysqli_get ) {
					foreach ( $_GET as $name => $value ) {
						if (is_array( $_GET[ $name ] )) {
							array_walk_recursive($_GET[ $name ], function(&$value) use ($mysqli_common, $mysqli_escapes, $mysqli_abs) {
								$value = self::sqli_clean( $value, $mysqli_common, $mysqli_escapes, $mysqli_abs );
							});
						} else {
							$_GET[ $name ] = self::sqli_clean( $value, $mysqli_common, $mysqli_escapes, $mysqli_abs );
						}
					}
				}
				if ( $mysqli_post ) {
					foreach ( $_POST as $name => $value ) {
						if (is_array( $_POST[ $name ] )) {
							array_walk_recursive($_POST[ $name ], function(&$value) use ($mysqli_common, $mysqli_escapes, $mysqli_abs) {
								$value = self::sqli_clean( $value, $mysqli_common, $mysqli_escapes, $mysqli_abs );
							});
						} else {
							$_POST[ $name ] = self::sqli_clean( $value, $mysqli_common, $mysqli_escapes, $mysqli_abs );
						}
					}
				}
			}

			// Prevent malicious files from being uploaded
			if ( $filei_enabled ) {
				foreach ( $_FILES as $name => $value ) {
					self::file_clean( $value['tmp_name'], $value['type'], $filei_mimes, $filei_scan );
				}
			}

		}

		// File Upload Protection
		private static function file_clean( $data, $type, $filei_mimes, $filei_scan ) {
			$bad_words = array(
				'<?php',
				'<?',
				'?>',
				'function',
				'create_function',
				'eval',
				'symlink',
				'apache_child_terminate',
				'apache_setenv',
				'define_syslog_variables',
				'escapeshellarg',
				'escapeshellcmd',
				'eval',
				'exec',
				'fp',
				'fput',
				'ftp_connect',
				'ftp_exec',
				'ftp_get',
				'ftp_login',
				'ftp_nb_fput',
				'ftp_put',
				'ftp_raw',
				'ftp_rawlist',
				'highlight_file',
				'ini_alter',
				'ini_get_all',
				'ini_restore',
				'inject_code',
				'mysql_pconnect',
				'openlog',
				'passthru',
				'php_uname',
				'phpAds_remoteInfo',
				'phpAds_XmlRpc',
				'phpAds_xmlrpcDecode',
				'phpAds_xmlrpcEncode',
				'popen',
				'posix_getpwuid',
				'posix_kill',
				'posix_mkfifo',
				'posix_setpgid',
				'posix_setsid',
				'posix_setuid',
				'posix_setuid',
				'posix_uname',
				'proc_close',
				'proc_get_status',
				'proc_nice',
				'proc_open',
				'proc_terminate',
				'shell_exec',
				'syslog',
				'system',
				'xmlrpc_entity_decode',
				'symlink'
			);
			$bad_mimes = array(
				'application/x-msdownload',
				'application/x-msdos-program',
				'application/x-msdos-windows',
				'application/x-download',
				'application/bat',
				'application/x-bat',
				'application/com',
				'application/x-com',
				'application/exe',
				'application/x-exe',
				'application/x-winexe',
				'application/x-winhlp',
				'application/x-winhelp',
				'application/x-javascript',
				'application/hta',
				'application/x-ms-shortcut',
				'application/octet-stream',
				'text/x-php',
				'application/x-php',
				'text/php',
				'application/php'
			);
			// Check the mime
			if ( $filei_mimes ) {
				foreach ( $bad_mimes as $m ) {
					if ( $m == $type ) {
						file_put_contents( $data, '#' );

						return;
					}
				}
			}
			if ( $filei_scan ) {
				if ( file_exists( $data ) ) {
					$file = file_get_contents( $data );
					foreach ( $bad_words as $b ) {
						if ( strpos( $file, $b ) !== false ) {
							file_put_contents( $data, '#' );

							return;
						}
					}
					file_put_contents( $data, $file );
				}
			}
		}

		// SQL Injection Protection
		private static function sqli_clean( $data, $mysqli_common, $mysqli_escapes, $mysqli_abs ) {
			if ( is_numeric( $data ) ) {
				if ( $mysqli_abs ) {
					if ( $data < 0 ) {
						$data = abs( $data );
					}
				}

				return $data;
			} elseif ( is_string( $data ) ) {
				if ( $mysqli_common ) {
					$bad_words = array(
						'INSERT',
						'SELECT',
						'UPDATE',
						'DELETE',
						'UNION',
						' OR ',
						' AND ',
						' WHERE ',
						' SET '
					);
					foreach ( $bad_words as $b ) {
						$data = str_replace( $b, '', $data );
					}
				}
				if ( $mysqli_escapes ) {
					$data = str_replace( '\\', '\\\\', $data );
					$data = str_replace( '\'', '\\\'', $data );
					$data = str_replace( '"', '\\"', $data );
				}

				return $data;
			}
			return $data;
		}

		// XSS Injection Protection
		private static function xss_clean( $data ) {
			// Fix &entity\n;
			$data = str_replace( array( '&amp;', '&lt;', '&gt;' ), array(
				'&amp;amp;',
				'&amp;lt;',
				'&amp;gt;'
			), $data );
			$data = preg_replace( '/(&#*\w+)[\x00-\x20]+;/u', '$1;', $data );
			$data = preg_replace( '/(&#x*[0-9A-F]+);*/iu', '$1;', $data );
			$data = html_entity_decode( $data, ENT_COMPAT, 'UTF-8' );

			// Remove any attribute starting with "on" or xmlns
			$data = preg_replace( '#(<[^>]+?[\x00-\x20"\'])(?:on|xmlns)[^>]*+>#iu', '$1>', $data );

			// Remove javascript: and vbscript: protocols
			$data = preg_replace( '#([a-z]*)[\x00-\x20]*=[\x00-\x20]*([`\'"]*)[\x00-\x20]*j[\x00-\x20]*a[\x00-\x20]*v[\x00-\x20]*a[\x00-\x20]*s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:#iu', '$1=$2nojavascript...', $data );
			$data = preg_replace( '#([a-z]*)[\x00-\x20]*=([\'"]*)[\x00-\x20]*v[\x00-\x20]*b[\x00-\x20]*s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:#iu', '$1=$2novbscript...', $data );
			$data = preg_replace( '#([a-z]*)[\x00-\x20]*=([\'"]*)[\x00-\x20]*-moz-binding[\x00-\x20]*:#u', '$1=$2nomozbinding...', $data );

			// Only works in IE: <span style="width: expression(alert('Ping!'));"></span>
			$data = preg_replace( '#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?expression[\x00-\x20]*\([^>]*+>#i', '$1>', $data );
			$data = preg_replace( '#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?behaviour[\x00-\x20]*\([^>]*+>#i', '$1>', $data );
			$data = preg_replace( '#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:*[^>]*+>#iu', '$1>', $data );

			// Remove namespaced elements (we do not need them)
			$data = preg_replace( '#</*\w+:\w[^>]*+>#i', '', $data );

			do {
				// Remove really unwanted tags
				$old_data = $data;
				$data     = preg_replace( '#</*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|i(?:frame|layer)|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|title|xml)[^>]*+>#i', '', $data );
			} while ( $old_data !== $data );

			// we are done...
			return $data;
		}

		// Make request to WPScan Vulnerability Database
		public static function check($type = null, $data = null) {
			$printJSON = false;
			if ($type == null && $data == null) {
				$type = (isset($_POST['type'])) ? $_POST['type'] : null;
				$data = (isset($_POST['data'])) ? $_POST['data'] : null;
				$printJSON = true;
			}
			if ($type == null || $data == null) {
				if ($printJSON) {
					wp_send_json(array('status'=>'ERROR', 'key'=>$data,  'message'=>'Missing request parameters.'));
					wp_die();
				} else {
					return false;
				}
			}

			$response = wp_remote_get( "https://wpvulndb.com/api/v2/{$type}/{$data}" );
			if( is_array($response) ) {
				$body = $response['body']; // use the content
				$body = json_decode($body, true);
				if (!$body) {
					if ($printJSON) {
						wp_send_json(array('status'=>'ERROR', 'key'=>$data,  'message'=>'Cannot parse JSON response.'));
						wp_die();
					} else {
						return false;
					}
				} else {
					if ($printJSON) {
						wp_send_json(array('status'=>'SUCCESS', 'key'=>$data, 'data'=>$body));
						wp_die();;
					} else {
						return $body;
					}
				}
			} else {
				if ($printJSON) {
					wp_send_json(array('status'=>'ERROR', 'key'=>$data,  'message'=>'Cannot make request towards WP DB.'));
					wp_die();
				} else {
					return false;
				}
			}
		}
        
        public static function cron_check(){

            $wpc = get_option( 'wpc' );

            if(isset($wpc['exploit_alert'])){
                if($wpc['exploit_alert'] == 0){
                    return false;
                }
            }

            $admin_email = get_option( 'admin_email' );

            if(!isset($admin_email)){
                return false;
            }

            $pluginsRaw = get_plugins();
            $plugins    = array();
            foreach ( $pluginsRaw as $plugin => $values ) {
                $x                = explode( '/', $plugin );
                $plugins[] = $x[0];
            }

            $themesRaw = wp_get_themes();
            $themes    = array();
            foreach ( $themesRaw as $theme => $values ) {
                $themes[] = $theme;
            }

            $wpc_scanner = array(
                'plugins'=>  $plugins,
                'themes'=> $themes,
                'wordpresses'=> array(preg_replace('/\./', '', get_bloginfo('version')))
            );

            $results = array();
            foreach ($wpc_scanner as $key=>$val){
                foreach ($val as $v){
                    $response = wp_remote_get( "https://wpvulndb.com/api/v2/{$key}/{$v}" );
                    $body = $response['body']; // use the content
                    $body = json_decode($body, true);
                    $results[$key][] = $body;
                }
            }

            $problems = array();
            foreach ($results as $type=>$value){
                //$type is plugins, themes and wp version
                if(is_array($value)){
                    foreach ($value as $val){
                        if(is_array($val)){
                            foreach ($val as $name=>$arr){
                                if(isset($arr['latest_version'])){
                                    $latest_version = $arr['latest_version'];
                                    if(!sizeof($arr['vulnerabilities']) < 1){
                                        for($i = 0; $i < sizeof($arr['vulnerabilities']); $i++){
                                            $vurn = $arr['vulnerabilities'][$i];

                                            if(version_compare($latest_version, $vurn['fixed_in']) == -1 || $vurn['fixed_in'] == null){
                                                $problems[$type][] = array(
                                                    'name' => $name,
                                                    'current_version' => $latest_version,
                                                    'problem_title' => $vurn['title'],
                                                    'vuln_type' => $vurn['vuln_type']
                                                );
                                            }
                                        }
                                    }
                                }else{
                                    $latest_version = $name;
                                    if(!sizeof($arr['vulnerabilities']) < 1){
                                        for($i = 0; $i < sizeof($arr['vulnerabilities']); $i++){
                                            $vurn = $arr['vulnerabilities'][$i];
                                            if(version_compare($latest_version, $vurn['fixed_in']) == -1 || $vurn['fixed_in'] == null){
                                                $problems['wordpress'][] = array(
                                                    'current_version' => $latest_version,
                                                    'problem_title' => $vurn['title'],
                                                    'vuln_type' => $vurn['vuln_type']
                                                );
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if(empty($problems['wordpress']) && empty($problems['plugins']) && empty($problems['themes'])){
                wp_die();
            }

            $body = file_get_contents(WPC_PATH . '/pages/emails/exploit-scanner.php');
            $siteUrl = get_home_url();
            $body = str_replace('[siteurl]', $siteUrl, $body);
            $html = '<div style="text-align: left">';

            foreach ($problems as $p_type=>$value){
                if($p_type == 'wordpress'){
                    $html .= '<b style="color: #b9c3b5; font-size: 20px; margin-left: 10px;">WordPress Vulnerability</b><hr>';
                    foreach ($value as $v){
                        if(isset($v['vuln_type'])){
                            $html .= '<p style="margin: 4px 0px 4px 20px;">Vulnerability Type: '.$v['vuln_type'].'</p>';
                        }
                        if(isset($v['problem_title'])){
                            $html .= '<p style="margin: 4px 0px 4px 20px;">Vulnerability Title: '.$v['problem_title'].'</p>';
                        }
                    }
                }else{
                    if($p_type == 'plugins'){
                        $html .= '<b style="color: #b9c3b5; font-size: 20px; margin-left: 10px;">Plugin Vulnerability</b><hr>';
                    }else{
                        $html .= '<b style="color: #b9c3b5; font-size: 20px; margin-left: 10px;">Theme Vulnerability</b><hr>';
                    }
                    foreach ($value as $v){
                        if(isset($v['name'])){
                            $html .= '<p style="margin: 4px 0px 4px 20px;">Plugin Name: '.$v['name'].'</p>';
                        }
                        if(isset($v['vuln_type'])){
                            $html .= '<p style="margin: 4px 0px 4px 20px;">Vulnerability Type: '.$v['vuln_type'].'</p>';
                        }
                        if(isset($v['problem_title'])){
                            $html .= '<p style="margin: 4px 0px 4px 20px;">Vulnerability Title: '.$v['problem_title'].'</p>';
                        }
                    }
                }
            }

            $html .= '</div>';

            $body = str_replace('[vurns]', $html , $body);
            $mail = new MWPC_Mail();
            $mail->send($admin_email,'Crusader Security Plugin - Exploit Scanner [VULNERABILITY DETECTED]', $body);
        }

        public static function scheduleCronJobs($wpc_options){
            if(!isset($wpc_options['exploit_date']) || empty($wpc_options['exploit_date'])){
                wp_clear_scheduled_hook('wpc_exploitScanner');
            }
            if($wpc_options['exploit_date'] != 'never'){
                if ( ! wp_next_scheduled( 'wpc_exploitScanner' ) ) {
                    wp_schedule_event(time(), $wpc_options['exploit_date'], 'wpc_exploitScanner');
                }else{
                    if(wp_get_schedule( 'wpc_exploitScanner' ) != $wpc_options['exploit_date']){
                        wp_clear_scheduled_hook('wpc_exploitScanner');
                        wp_schedule_event(time(), $wpc_options['exploit_date'], 'wpc_exploitScanner');
                    }
                }
            }else{
                wp_clear_scheduled_hook('wpc_exploitScanner');
            }
        }

        public static function saveOptions() {
            $wpc = $_POST['wpc'];
            if (!is_array($wpc)) wp_die('WPC is not an array.');
            if (!is_admin()) wp_die('You are not an admin.');
            $wpc_option = get_option('wpc');
            foreach($wpc as $key=>$value) {
                $wpc_option[$key] = $value;
            }
            update_option('wpc', $wpc_option);

            //Schedule Cron Jobs
            self::scheduleCronJobs($wpc_option);
            //Schedule Cron Jobs
        }
	}

}