var scanRunning = false;
var directAccessRunning = false;
var detectedSomething = false;
var button_icon = '';

(function( $ ) {
    'use strict';

    $(document).ready(function(){
        $('#direct_access_form').submit(function(e){
            e.preventDefault();

            var form = $(this);
            var submitBtn = form.find('button[type="submit"]');
            disableButton(submitBtn);

            var value = form.find('input[name="wpc[direct_access_protection]"]').prop('checked');

            if(value){
                value = 1;
            }else{
                value = 0;
            }

            var data = [
                {
                    name: 'action',
                    value: 'wpc_save_direct_options'
                },
                {
                    name: 'wpc[direct_access_protection]',
                    value: value
                }];

            $.post(wpc_data.wp_post, data, function(d){
                enableButton(submitBtn);
                UIkit.notify("<i class='uk-icon-check'></i> Your settings have been saved.", {pos:'bottom-right', status:"success"});
            });
        });

        $('.start-scanner').click(function(){
            if (scanRunning) {
                UIkit.notify('An instance of scan is already running.', {pos:'bottom-right', status: 'warning'});
            } else {
                exploitScanner();
            }
        });
        $('.run-direct-protection').click(function(){
            if (directAccessRunning) {
                UIkit.notify('An instance of Direct Protection module is already running.', {pos:'bottom-right', status: 'warning'});
            } else {
                directAccessProtection();
            }
        });

        $('#exploit_form').submit(function(e){
            e.preventDefault();

            var submitBtn = $(this).find('button[type="submit"]');
            disableButton(submitBtn);

            $.post(wpc_data.wp_post, $(this).serialize(), function(d){
                enableButton(submitBtn);
                UIkit.notify("<i class='uk-icon-check'></i> Your settings have been saved.", {pos:'bottom-right', status:"success"});
            });
        });
    });

    function directAccessProtection() {
        // Set the scan as initialized
        directAccessRunning = true;

        // Revert to starting state
        var dp_label = $('.dp-label');
        var dp_progress = $('.dp-progress');
        var dp_progress_value = $('.dp-progress-value');

        dp_label.removeClass('uk-text-success').addClass('uk-text-danger');
        dp_label.html('<i class="fa fa-warning"></i> Please do not close this page until the process is complete!');

        dp_progress.removeClass('uk-progress-success').addClass('uk-progress-striped').addClass('uk-active');

        dp_progress_value.html('<i class="fa fa-refresh fa-spin"></i> Gathering information...');
        dp_progress_value.css('width', '100%');

        dp_label.slideDown();
        dp_progress.slideDown();

        // Get the files
        var data = [{
            name: 'action',
            value: 'wpc_direct_access_protection_getFiles'
        }];
        $.post(wpc_data.wp_post, data, function(d){
            if ($.isArray(d)) {
                var files = d;
                var totalFiles = files.length;

                dp_label.removeClass('uk-text-danger').addClass('uk-text-success');
                dp_label.html('<i class="fa fa-refresh fa-spin"></i> Found '+totalFiles+' files! Please wait until all files are processed!');

                // Prepare the progress bar for Process
                dp_progress.removeClass('uk-progress-striped').removeClass('uk-active');
                dp_progress_value.css('width', '0%');

                // Start the Process
                for (var i = 0; i < totalFiles; i++) {
                    var file = files[i];

                    var data = [{
                        name: 'action',
                        value: 'wpc_direct_access_protection_protectFiles'
                    },{
                        name: 'file',
                        value: file
                    },{
                        name: 'index',
                        value: i
                    }];

                    $.postq('FileProcessing', wpc_data.wp_post, data, function(o){
                        // Check if all files have been processed
                        setTimeout(function(){
                            if (!$.ajaxq.isRunning()) {
                                dp_progress.addClass('uk-progress-success');
                                dp_progress_value.html('<i class="fa fa-check"></i> Operation is complete.');

                                dp_label.html('<i class="fa fa-check"></i> All files are processed. You now have Direct Access Protection on your WordPress website.');

                                directAccessRunning = false;
                            }
                        },2000);

                        var index = parseInt(o.index) + 1;

                        // Update progress bar
                        dp_progress_value.html(index + ' / ' + totalFiles);
                        dp_progress_value.css('width', ((index / totalFiles) * 100) + '%');

                    }, 'json')
                }

            } else {
                dp_label.removeClass('uk-text-danger').addClass('uk-text-warning');
                dp_label.html('<i class="fa fa-warning"></i> There was a problem starting this process! Please contact support!');
                dp_progress.slideUp();
            }
        }, 'json');
    }
    function exploitScanner() {
        // Set the scan as initialized
        scanRunning = true;
        detectedSomething = false;

        var message_progress = $('.message.progress');
        var message_safe = $('.message.safe');
        var message_detected = $('.message.detected');

        message_progress.show();
        message_safe.hide();
        message_detected.hide();

        var wpcore = $('.analysis.wpcore');
        var plugins = $('.analysis.plugin');
        var themes = $('.analysis.theme');

        var wpcore_results = $('.results.wpcore');
        var plugins_results = $('.results.plugin');
        var themes_results = $('.results.theme');

        wpcore_results.empty();
        plugins_results.empty();
        themes_results.empty();

        // Set the default placeholders
        wpcore.html('<i class="fa fa-refresh fa-spin"></i> Queued for analysis...');
        plugins.html('<i class="fa fa-refresh fa-spin"></i> Queued for analysis...');
        themes.html('<i class="fa fa-refresh fa-spin"></i> Queued for analysis...');

        $('.message-text').html('<i class="fa fa-refresh fa-spin"></i> This might take some time... Don\'t close this page.');

        $('.scan-process').slideDown();

        // Display the results box
        $('.uk-block').slideDown();

        // Wait a bit for all to come down
        setTimeout(function(){
            /** WP CORE **/
            var data = [{
                name: 'action',
                value: 'wpc_exploit_scanner'
            },{
                name: 'type',
                value: 'wordpresses'
            },{
                name: 'data',
                value: wpc_scanner.wpversion.replace(/\./g, '')
            }];
            $.post(wpc_data.wp_post, data, function(d){
                if (d.status == 'SUCCESS') {
                    if (d.data[wpc_scanner.wpversion].vulnerabilities.length > 0) {
                        detectedSomething = true;

                        wpcore.html('<i style="color:red" class="fa fa-close"></i> Your WordPress version is affected by some vulnerabilities! Please update your WordPress version as using the current version is highly unsafe due to already existing exploits!');
                        var v = d.data[wpc_scanner.wpversion].vulnerabilities;
                        for(var i = 0; i < v.length; i++) {
                            var vurn = v[i];
                            var html = '<li class="exploit">'+vurn.title+'[ul]</li>';
                            var ul = '<ul>';
                            ul += '<li>Type: <code>'+vurn.vuln_type+'</code></li>';
                            ul += '<li>Fixed in: <code>'+vurn.fixed_in+'</code></li>';
                            ul += '</ul>';
                            html = html.replace('[ul]', ul);
                            var li = wpcore_results.append(html);
                        }
                    } else {
                        wpcore.html('<i style="color:green" class="fa fa-check-circle-o"></i> Your WordPress version does not have any detected vulnerabilities! Keep being updated to stay protected!');
                    }
                } else {
                    wpcore.html('<i style="color:red" class="fa fa-close"></i> Could not validate request output, please try again later...');
                }
            });
            /** WP CORE **/

            /** PLUGINS **/
            plugins.html('<i class="fa fa-refresh fa-spin"></i> Checking plugins...');
            for(var key in wpc_scanner.plugins) {
                console.log(key);
                var html = '<li id="plugin-'+key+'" class="exploit queued">'+wpc_scanner.plugins[key].Name+' (<i class="fa fa-refresh fa-spin"></i> Queued)</li>';
                plugins_results.append(html);

                data = [{
                    name: 'action',
                    value: 'wpc_exploit_scanner'
                },{
                    name: 'type',
                    value: 'plugins'
                },{
                    name: 'data',
                    value: key
                }];
                $.postq('Plugins', wpc_data.wp_post, data, function(d){
                    // Check whether all ajaxes have been completed
                    setTimeout(function(){
                        if (!$.ajaxq.isRunning('Plugins') && !$.ajaxq.isRunning('Themes')) {
                            $('.message-text').html('<i class="fa fa-check"></i> Scanning has been completed. View the results below.');
                            scanRunning = false;
                            if (detectedSomething) {
                                message_detected.show();
                            } else {
                                message_safe.show();
                            }
                            message_progress.hide();
                        }
                        if (!$.ajaxq.isRunning('Plugins')) {
                            plugins.html('<i class="fa fa-check"></i> Plugin scan is completed.');
                        }
                    }, 2000);


                    if (d.status == 'SUCCESS') {
                        if (d.data[d.key].vulnerabilities.length > 0) {
                            var v = d.data[d.key].vulnerabilities;
                            var detected = [];
                            for(var i = 0; i < v.length; i++) {
                                var vurn = v[i];
                                var html = '<li class="exploit">'+vurn.title+'[ul]</li>';
                                var ul = '<ul>';
                                ul += '<li>Type: <code>'+vurn.vuln_type+'</code></li>';
                                ul += '<li>Fixed in: <code>'+vurn.fixed_in+'</code></li>';
                                ul += '</ul>';
                                html = html.replace('[ul]', ul);

                                if (version_compare(wpc_scanner.plugins[d.key].Version, vurn.fixed_in) == -1) {
                                    detectedSomething = true;
                                    detected.push(html);
                                }
                            }

                            // Check whether any plugins got detected
                            if (detected.length > 0) {

                                var ul = '<ul>';
                                ul += detected.join();
                                ul += '</ul>';

                                var p = $('#plugin-'+d.key);
                                p.removeClass('queued');
                                p.html(wpc_scanner.plugins[d.key].Name + ' (<i style="color:red" class="fa fa-close"></i> Vulnerable) - Current Version: <b>'+wpc_scanner.plugins[d.key].Version+'</b>' + ul);

                            } else {
                                var p = $('#plugin-'+d.key);
                                p.addClass('safe');
                                p.html(wpc_scanner.plugins[d.key].Name + ' (<i style="color:green" class="fa fa-check"></i> OK)');
                            }

                        } else {
                            var p = $('#plugin-'+d.key);
                            p.addClass('safe');
                            p.html(wpc_scanner.plugins[d.key].Name + ' (<i style="color:green" class="fa fa-check"></i> OK)');
                        }
                    } else {
                        var p = $('#plugin-'+d.key);
                        p.addClass('safe');
                        p.html(wpc_scanner.plugins[d.key].Name + ' (<i style="color:green" class="fa fa-check"></i> OK)');
                    }
                });
            }
            /** PLUGINS **/

            /** THEMES **/
            themes.html('<i class="fa fa-refresh fa-spin"></i> Checking themes...');
            for(var key in wpc_scanner.themes) {
                var html = '<li id="theme-'+key+'" class="exploit queued">'+wpc_scanner.themes[key].Name+' (<i class="fa fa-refresh fa-spin"></i> Queued)</li>';
                themes_results.append(html);

                data = [{
                    name: 'action',
                    value: 'wpc_exploit_scanner'
                },{
                    name: 'type',
                    value: 'themes'
                },{
                    name: 'data',
                    value: key
                }];
                $.postq('Themes', wpc_data.wp_post, data, function(d){
                    // Check whether all ajaxes have been completed
                    setTimeout(function(){
                        if (!$.ajaxq.isRunning('Plugins') && !$.ajaxq.isRunning('Themes')) {
                            $('.message-text').html('<i class="fa fa-check"></i> Scanning has been completed. View the results below.');
                            scanRunning = false;
                            if (detectedSomething) {
                                message_detected.show();
                            } else {
                                message_safe.show();
                            }
                            message_progress.hide();
                        }
                        if (!$.ajaxq.isRunning('Themes')) {
                            themes.html('<i class="fa fa-check"></i> Themes scan is completed.');
                        }
                    }, 2000);


                    if (d.status == 'SUCCESS') {
                        if (d.data[d.key].vulnerabilities.length > 0) {
                            var v = d.data[d.key].vulnerabilities;
                            var detected = [];
                            for(var i = 0; i < v.length; i++) {
                                var vurn = v[i];
                                var html = '<li class="exploit">'+vurn.title+'[ul]</li>';
                                var ul = '<ul>';
                                ul += '<li>Type: <code>'+vurn.vuln_type+'</code></li>';
                                ul += '<li>Fixed in: <code>'+vurn.fixed_in+'</code></li>';
                                ul += '</ul>';
                                html = html.replace('[ul]', ul);

                                if (version_compare(wpc_scanner.themes[d.key].Version, vurn.fixed_in) == -1) {
                                    detectedSomething = true;
                                    detected.push(html);
                                }
                            }

                            // Check whether any plugins got detected
                            if (detected.length > 0) {

                                var ul = '<ul>';
                                ul += detected.join();
                                ul += '</ul>';

                                var p = $('#theme-'+d.key);
                                p.removeClass('queued');
                                p.html(wpc_scanner.themes[d.key].Name + ' (<i style="color:red" class="fa fa-close"></i> Vulnerable) - Current Version: <b>'+wpc_scanner.themes[d.key].Version+'</b>' + ul);

                            } else {
                                var p = $('#theme-'+d.key);
                                p.addClass('safe');
                                p.html(wpc_scanner.themes[d.key].Name + ' (<i style="color:green" class="fa fa-check"></i> OK)');
                            }

                        } else {
                            var p = $('#theme-'+d.key);
                            p.addClass('safe');
                            p.html(wpc_scanner.themes[d.key].Name + ' (<i style="color:green" class="fa fa-check"></i> OK)');
                        }
                    } else {
                        var p = $('#theme-'+d.key);
                        p.addClass('safe');
                        p.html(wpc_scanner.themes[d.key].Name + ' (<i style="color:green" class="fa fa-check"></i> OK)');
                    }
                });
            }
            /** THEMES **/

        }, 3000);
    }

})( jQuery );

function version_compare (a, b) {
    var i, l, diff, segmentsA, segmentsB;

    segmentsA = a.replace(/(\.0+)+$/, '').split('.');
    segmentsB = b.replace(/(\.0+)+$/, '').split('.');
    l = Math.min(segmentsA.length, segmentsB.length);

    for (i = 0; i < l; i++) {
        diff = parseInt(segmentsA[i], 10) - parseInt(segmentsB[i], 10);
        if (diff !== 0) {
            return diff;
        }
    }
    return segmentsA.length - segmentsB.length;
}

function disableButton(button){
    button_icon = button.find('i').attr('class');
    button.prop('disabled', true).find('i.fa').removeClass().addClass('fa fa-refresh fa-spin');
}
function enableButton(button){
    button.prop('disabled', false).find('i.fa').removeClass().addClass(button_icon);
}