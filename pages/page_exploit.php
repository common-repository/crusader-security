<?php if (!defined('ABSPATH')) die('Access Denied.'); ?>

<!-- HTML STARTS HERE -->
<div class="wrap wpc">

	<h2 class="logo-title">
		<img class="logo-image" src="<?php echo WPC_URL; ?>/assets/img/logo.png"/>
		Crusader Security - Anti-Exploit
		-
		<small class="hand">Prevent them before they even try...</small>
	</h2>

	<div class="uk-grid">
		<div class="uk-width-1-1">

			<!-- Request Filtering -->
			<div class="uk-panel uk-panel-box uk-panel-header">
				<h4 class="uk-panel-title"><img
						src="<?php echo WPC_URL; ?>assets/img/exploit.png"> Request Filtering
					<small>- sanitize incoming web requests and file uploads</small>
				</h4>
				<div class="uk-alert"><b><i class="fa fa-question-circle"></i> How can this help me?</b>
					Sanitizing web requests will prevent any malicious actions against your website. This will remove
					all the potentially unsafe content from <code>GET</code>, <code>POST</code> and <code>FILES</code>
					requests that are
					being accepted by your website, meaning even after somebody tries to exploit your already
					exploitable plugin, they will fail as unsafe content will be automatically removed. Request Filter
					protects you from
					XSS, MySQL Injections and malicious File Uploads.
				</div>

				<?php
				$wpc = get_option( 'wpc' );

				// MySQL Injection
				$mysqli_enabled = isset( $wpc['mysqli_enabled'] ) ? checked( $wpc['mysqli_enabled'] ,true ,false ) : checked( false ,true ,false );
				$mysqli_post    = isset( $wpc['mysqli_post'] ) ? checked( $wpc['mysqli_post'] ,true ,false ) : checked( false ,true ,false );
				$mysqli_get     = isset( $wpc['mysqli_get'] ) ? checked( $wpc['mysqli_get'] ,true ,false ) : checked( false ,true ,false );
				$mysqli_common  = isset( $wpc['mysqli_common'] ) ? checked( $wpc['mysqli_common'] ,true ,false ) : checked( false ,true ,false );
				$mysqli_escapes = isset( $wpc['mysqli_escapes'] ) ? checked( $wpc['mysqli_escapes'] ,true ,false ) : checked( false ,true ,false );
				$mysqli_abs     = isset( $wpc['mysqli_abs'] ) ? checked( $wpc['mysqli_abs'] ,true ,false ) : checked( false ,true ,false );

				// XSS Injection
				$xssi_enabled = isset( $wpc['xssi_enabled'] ) ? checked( $wpc['xssi_enabled'] ,true ,false ) : checked( false ,true ,false );
				$xssi_get     = isset( $wpc['xssi_get'] ) ? checked( $wpc['xssi_get'] ,true ,false ) : checked( false ,true ,false );
				$xssi_post    = isset( $wpc['xssi_post'] ) ? checked( $wpc['xssi_post'] ,true ,false ) : checked( false ,true ,false );

				// File Injection
				$filei_enabled = isset( $wpc['filei_enabled'] ) ? checked( $wpc['filei_enabled'] ,true ,false ) : checked( false ,true ,false );
				$filei_mimes   = isset( $wpc['filei_mimes'] ) ? checked( $wpc['filei_mimes'] ,true ,false ) : checked( false ,true ,false );
				$filei_scan    = isset( $wpc['filei_enabled'] ) ? checked( $wpc['filei_scan'] ,true ,false ) : checked( false ,true ,false );
				?>

				<form class="wpc-settings-form">

					<input type="hidden" name="action" value="wpc_save_options"/>

					<div class="uk-form uk-form-stacked">

						<div class="uk-grid">
							<!-- MySQL Injection -->
							<div class="uk-width-1-3">
								<div class="uk-form-row">
									<label class="uk-form-label" for="mysqli_enabled">
										<input type="hidden" name="wpc[mysqli_enabled]" class="form-control" value="0">
										<input id="mysqli_enabled" type="checkbox" name="wpc[mysqli_enabled]"
										       value="1" <?php echo $mysqli_enabled; ?>>
										MySQL Injection Filtering
									</label>

									<input type="hidden" name="wpc[mysqli_post]" class="form-control" value="0"/>
									<input id="mysqli_post" type="checkbox" name="wpc[mysqli_post]"
									       value="1" <?php echo $mysqli_post; ?>>
									<label for="mysqli_post">Filter <code>POST</code> Requests</label>

									<br>

									<input type="hidden" name="wpc[mysqli_get]" class="form-control" value="0"/>
									<input id="mysqli_get" type="checkbox" name="wpc[mysqli_get]"
									       value="1" <?php echo $mysqli_get; ?>>
									<label for="mysqli_get">Filter <code>GET</code> Requests</label>

									<br>

									<input type="hidden" name="wpc[mysqli_common]" class="form-control" value="0"/>
									<input id="mysqli_common" type="checkbox" name="wpc[mysqli_common]"
									       value="1" <?php echo $mysqli_common; ?>>
									<label for="mysqli_common">Filter Common MySQL Phrases</label>

									<br>

									<input type="hidden" name="wpc[mysqli_escapes]" class="form-control" value="0"/>
									<input id="mysqli_escapes" type="checkbox" name="wpc[mysqli_escapes]"
									       value="1" <?php echo $mysqli_escapes; ?>>
									<label for="mysqli_escapes">Escape <code>'</code> and <code>"</code> in
										Requests</label>

									<br>

									<input type="hidden" name="wpc[mysqli_abs]" class="form-control" value="0"/>
									<input id="mysqli_abs" type="checkbox" name="wpc[mysqli_abs]"
									       value="1" <?php echo $mysqli_abs; ?>>
									<label for="mysqli_abs">Convert Negative Numbers into Positive</label>

									<p class="uk-form-help-block"><span class="uk-badge">NOTE</span> Protection against
										MySQL Injection attacks who could lead to database integrity dangers.</p>

								</div>
							</div>
							<!-- XSS Injection -->
							<div class="uk-width-1-3">
								<div class="uk-form-row">
									<label class="uk-form-label" for="xssi_enabled">
										<input type="hidden" name="wpc[xssi_enabled]" class="form-control" value="0">
										<input id="xssi_enabled" type="checkbox" name="wpc[xssi_enabled]"
										       value="1" <?php echo $xssi_enabled; ?>>
										XSS Injection Filtering
									</label>

									<input type="hidden" name="wpc[xssi_post]" class="form-control" value="0"/>
									<input id="xssi_post" type="checkbox" name="wpc[xssi_post]"
									       value="1" <?php echo $xssi_post; ?>>
									<label for="xssi_post">Filter <code>POST</code> Requests</label>

									<br>

									<input type="hidden" name="wpc[xssi_get]" class="form-control" value="0"/>
									<input id="xssi_get" type="checkbox" name="wpc[xssi_get]"
									       value="1" <?php echo $xssi_get; ?>>
									<label for="xssi_get">Filter <code>GET</code> Requests</label>

									<p class="uk-form-help-block"><span class="uk-badge">NOTE</span> Protection against
										XSS based JavaScript attacks who may lead to credentials theft.</p>

								</div>
							</div>
							<!-- File Uploads -->
							<div class="uk-width-1-3">
								<div class="uk-form-row">
									<label class="uk-form-label" for="filei_enabled">
										<input type="hidden" name="wpc[filei_enabled]" class="form-control" value="0">
										<input id="filei_enabled" type="checkbox" name="wpc[filei_enabled]"
										       value="1" <?php echo $filei_enabled; ?>>
										File Upload Filtering
									</label>

									<input type="hidden" name="wpc[filei_mimes]" class="form-control" value="0"/>
									<input id="filei_mimes" type="checkbox" name="wpc[filei_mimes]"
									       value="1" <?php echo $filei_mimes; ?>>
									<label for="filei_mimes">Filter Files with Unsafe Mime Types</label>

									<br>

									<input type="hidden" name="wpc[filei_enabled]" class="form-control" value="0"/>
									<input id="filei_enabled" type="checkbox" name="wpc[filei_enabled]"
									       value="1" <?php echo $filei_enabled; ?>>
									<label for="filei_enabled">Filter Files for Common Unsafe Phrases</label>

									<p class="uk-form-help-block"><span class="uk-badge">NOTE</span> Protection against
										malicious file uploads such as shells and viruses.</p>

								</div>
							</div>
						</div>

						<div class="uk-alert uk-alert-warning"><b><i class="fa fa-warning"></i> Important Warning: </b>
							While preventing many attack vectors and exploits, some of the modules above can generally
							affect functionality of some of your plugins.
							For example, while having MySQL Injection Filtering turned on, plugins who use raw MySQL
							queries (very bad thing to do) in requests will be rendered useless. Also,
							while having File Upload Filtering turned on, you won't be able to upload <b>any</b> PHP
							files using your WordPress, therefore we suggest using FTP if you need to upload
							some PHP files to your WordPress.
						</div>

						<div class="uk-grid">
							<div class="uk-width-1-1">
								<button type="submit" name="submit" id="submit-wpc-changes"
								        class="uk-button uk-button-primary"><i
										class="fa fa-save"></i> Save All Changes
								</button>
							</div>
						</div>
					</div>

				</form>

			</div>

			<!-- Exploit Scanner -->
			<div class="uk-panel uk-panel-box uk-panel-header">
				<h4 class="uk-panel-title"><img
						src="<?php echo WPC_URL; ?>assets/img/file.png"> Direct Access Protection
					<small>- prevent your WordPress files from being accessed directly</small>
				</h4>
				<div class="uk-alert"><b><i class="fa fa-question-circle"></i> What does this do?</b>
					Simply by modifying each file with predefined WordPress constant, we protect your files from direct access in browser. This will help you fight against
					vulnerable plugins and themes that require direct access in order to be exploited. Turning on Direct Access Protection will go each of your files and protect it accordingly.
				</div>

				<?php
				$wpc = get_option( 'wpc' );

				$direct_access_protection  = isset( $wpc['direct_access_protection'] ) ? $wpc['direct_access_protection'] : false;
				?>

				<form class="direct_access_form" id="direct_access_form">

					<input type="hidden" name="action" value="wpc_save_direct_options"/>

					<div class="switch-body">

						<label class="switch">
							<input class="switch-input" type="checkbox" name="wpc[direct_access_protection]" value="1" <?php checked($direct_access_protection); ?>/>
							<span class="switch-label" data-on="On" data-off="Off"></span>
							<span class="switch-handle"></span>
						</label>

						<label class="swith-side-label">
							Automatic Direct Access Protection <br>
							<small><i class="fa fa-info-circle"></i> Will set up a background process that actively monitors for latest files and changes in current files</small>
						</label>

						<div class="uk-clearfix"></div>
					</div>

					<button class="uk-button uk-button-primary" type="submit"><i class="fa fa-save"></i> Save All
						Changes
					</button>

					<button class="uk-button uk-button-success run-direct-protection" type="button"><i class="fa fa-play"></i>
						Run Direct Access Protection Module
					</button>

				</form>

				<label class="progress-label dp-label" style="display: none;">...</label>
				<div class="uk-progress dp-progress" style="display: none;">
					<div class="uk-progress-bar dp-progress-value" style="width: 100%;">...</div>
				</div>

			</div>

			<!-- Exploit Scanner -->
			<div class="uk-panel uk-panel-box uk-panel-header">
				<h4 class="uk-panel-title"><img
						src="<?php echo WPC_URL; ?>assets/img/scanner.png"> Exploit Scanner
					<small>- determine whether you have any vulnerabilities on your website</small>
				</h4>
				<div class="uk-alert"><b><i class="fa fa-question-circle"></i> What does this do?</b>
					With Exploit Scanner, you will be able to see if you have any vulnerable plugins or themes on your
					WordPress. It also does check the WordPress core files for any vulnerabilities.
					If you happen to find a vulnerability, you will need to update the plugin/theme/WordPress if there's
					a newer version available and if not, we suggest that you deactivate it for the time being
					until a fix has been supplied for the detected vulnerability.
				</div>

				<!-- Load the necessary JavaScript variables -->
				<?php
				$pluginsRaw = get_plugins();
				$plugins    = array();
				foreach ( $pluginsRaw as $plugin => $values ) {
					$x                = explode( '/', $plugin );
					$plugins[ $x[0] ] = array(
						'Name'        => $values['Name'],
						'Version'     => $values['Version'],
						'Description' => $values['Description'],
						'Author'      => $values['Author'],
						'PluginURI'   => $values['PluginURI']
					);
				}

				$themesRaw = wp_get_themes();
				$themes    = array();
				foreach ( $themesRaw as $theme => $values ) {
					$themes[ $theme ] = array(
						'Name'        => $values->get( 'Name' ),
						'Version'     => $values->get( 'Version' ),
						'Description' => $values->get( 'Description' ),
						'Author'      => $values->get( 'Author' ),
						'ThemeURI'    => $values->get( 'ThemeURI' )
					);
				}
				?>
				<script type="application/javascript">
					var wpc_scanner = {
						plugins: <?php echo json_encode($plugins); ?>,
						themes: <?php echo json_encode($themes); ?>,
						wpversion: '<?php echo get_bloginfo('version'); ?>'

					};
				</script>


				<form class="backup-settings" id="exploit_form">

					<input type="hidden" name="action" value="wpc_save_exploit_options"/>

					<div class="uk-form-row">
						<label class="uk-form-label">
							<i class="fa fa-gears"></i> Fill in the blank spaces in the sentence below to configure
							your Exploit Scanner schedule:
						</label>

						<?php
						$wpc = get_option( 'wpc' );

						$exploit_date  = isset( $wpc['exploit_date'] ) ? $wpc['exploit_date'] : '';
						$exploit_alert = isset( $wpc['exploit_alert'] ) ? $wpc['exploit_alert'] : '';
						?>

						<blockquote>
							<p>I want Exploit Scanner to scan my website &nbsp;<select
									data-value="<?php echo $exploit_date; ?>" name="wpc[exploit_date]"
									id="exploit_date">
									<option value="never">never</option>
									<option value="hourly">once an hour</option>
									<option value="twicedaily">twice a day</option>
									<option value="daily">once a day</option>
								</select>. I &nbsp;<select data-value="<?php echo $exploit_alert; ?>"
							                               name="wpc[exploit_alert]" id="exploit_alert">
									<option value="0">don't want</option>
									<option value="1">want</option>
								</select> to be notified via e-mail when vulnerability has been detected.
							</p>
						</blockquote>

						<button class="uk-button uk-button-primary" type="submit"><i class="fa fa-save"></i> Save All
							Changes
						</button>
						<button class="uk-button uk-button-success start-scanner" type="button"><i
								class="fa fa-eye"></i>
							Run Exploit Scanner Now
						</button>
					</div>
					<div class="uk-form-row scan-process" style="display: none;">

						<div class="message progress">
							<label class="message-text"><i class="fa fa-refresh fa-spin"></i> This might take some time... Don't close this page.</label>

							<div class="uk-progress uk-progress-striped uk-active">
								<div class="uk-progress-bar message-progress" style="width: 100%;"></div>
							</div>
						</div>

						<div class="message safe uk-alert uk-alert-success"><b><i class="fa fa-check"></i> You are safe!</b>
							We couldn't find any problems on your WordPress website, meaning that the current WordPress version, installed plugins and themes
							do not have any known vulnerabilities that are disclosed. However, this doesn't mean you're 100% safe as there could be exploits
							that aren't still detected by professionals. It's best to have Crusader's Anti-Exploit module turned on always to prevent future attacks.
						</div>

						<div class="message detected uk-alert uk-alert-danger"><b><i class="fa fa-warning"></i> Red Alert!</b>
							We found some vulnerabilities in your WordPress website. Please see the table below to know which vulnerabilities have been detected. We advise you
							to update as soon as you can the Plugin/Theme/WordPress Core to prevent hackers from exploiting your website. In case where the exploit is highlighted as
							not yet fixed, we advise to disable the Plugin/Theme until a new version comes out with the fix for the detected vulnerability.
						</div>

						<div class="uk-grid">
							<div class="uk-width-1-1">
								<div class="uk-block uk-block-primary uk-contrast scanner-box" style="display:none">
									<div class="uk-container">

										<h3><i class="fa fa-wordpress"></i> WordPress Core</h3>

										<blockquote>
											<p class="analysis wpcore"><i class="fa fa-refresh fa-spin"></i> Queued for analysis...</p>
										</blockquote>

										<ul class="results wpcore"></ul>

									</div>
								</div>
							</div>
							<div class="uk-width-1-1">
								<div class="uk-block uk-block-primary uk-contrast scanner-box" style="display:none">
									<div class="uk-container">

										<h3><i class="fa fa-cubes"></i> Plugins</h3>

										<blockquote>
											<p class="analysis plugin"><i class="fa fa-refresh fa-spin"></i> Queued for analysis...</p>
										</blockquote>

										<ul class="results plugin"></ul>

									</div>
								</div>
							</div>
							<div class="uk-width-1-1">
								<div class="uk-block uk-block-primary uk-contrast scanner-box" style="display:none">
									<div class="uk-container">

										<h3><i class="fa fa-file-photo-o"></i> Themes</h3>

										<blockquote>
											<p class="analysis theme"><i class="fa fa-refresh fa-spin"></i> Queued for analysis...</p>
										</blockquote>

										<ul class="results theme"></ul>

									</div>
								</div>
							</div>
						</div>

				</form>

			</div>

		</div>
	</div>
</div>

</div> <!-- .wrap -->